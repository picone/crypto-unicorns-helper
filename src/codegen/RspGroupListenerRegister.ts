/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Error from "./Error";
import * as PayloadGroup from "./PayloadGroup";
export interface IRspGroupListenerRegisterArgs {
    result?: Error.Error;
    name?: string;
    group?: PayloadGroup.PayloadGroup;
}
export class RspGroupListenerRegister {
    public result?: Error.Error;
    public name?: string;
    public group?: PayloadGroup.PayloadGroup;
    constructor(args?: IRspGroupListenerRegisterArgs) {
        if (args != null && args.result != null) {
            this.result = args.result;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.group != null) {
            this.group = args.group;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RspGroupListenerRegister");
        if (this.result != null) {
            output.writeFieldBegin("result", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.result);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.group != null) {
            output.writeFieldBegin("group", thrift.Thrift.Type.STRUCT, 3);
            this.group.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RspGroupListenerRegister {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: Error.Error = input.readI32();
                        _args.result = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: PayloadGroup.PayloadGroup = PayloadGroup.PayloadGroup.read(input);
                        _args.group = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RspGroupListenerRegister(_args);
    }
}
